
#include "stdafx.h"
#include "Program.h"
#include "ProgramDlg.h"
#include "afxdialogex.h"

#include <time.h>
using namespace std;


#ifdef _DEBUG
#define new DEBUG_NEW
#endif

CProgramDlg::CProgramDlg(CWnd* pParent /*=nullptr*/)
	: CDialog(IDD_PROGRAM_DIALOG, pParent)
{
	srand((unsigned)time(NULL));
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CProgramDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	SetWindowTextW(L"Різнокольорові квадрати");
}

BEGIN_MESSAGE_MAP(CProgramDlg, CDialog)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
END_MESSAGE_MAP()


// CProgramDlg message handlers

BOOL CProgramDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here

	return TRUE;  // return TRUE  unless you set the focus to a control
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CProgramDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CClientDC dc(this);
		GetClientRect(&rc);

		c1 = 0x0000DDFF;
		c2 = 0x00C4563D;

		cf = RGB(255, 255, 255);

		dc.FillSolidRect(&rc, cf);

		x1 = rc.left; x2 = rc.right;
		y1 = rc.top;  y2 = rc.bottom;

		RH = x2 - x1;
		RW = y2 - y1;

		n = 8; p = 6;
		dx = RH / n;
		dy = RW / p;

		j = 0;
		for (k = 0; k < n; k++)
		{
			for (i = 0; i < p; i++)
			{
				//c = RGB(rand() * 255, rand() * 255, rand() * 255);

				if (j % 2 == 0) c = c1; else c = c2;
				j++;
				x = x1 + k * dx; x3 = x1 + (k + 1)*dx;
				y = y1 + i * dy; y3 = y1 + (i + 1)*dy;
				dc.FillSolidRect(x, y, x3, y3, c);
			}
			j = k - 1;
		}

		c = RGB(0, 0, 0);
		pno = CreatePen(PS_SOLID, 1, c);
		opn = (HPEN)SelectObject(dc, pno);

		for (k = 0; k < n; k++)
		{
			//c = RGB(rand() * 255, rand() * 255, rand() * 255);
			//pno = CreatePen(PS_SOLID, 4, c);
			//opn = (HPEN)SelectObject(dc, pno);
			x = x1 + k * dx; y = y1;
			dc.MoveTo(x, y);
			dc.LineTo(x, y2);
		}

		for (k = 0; k < p; k++)
		{
			//c = RGB(rand() * 255, rand() * 255, rand() * 255);
			//pno = CreatePen(PS_SOLID, 4, c);
			//opn = (HPEN)SelectObject(dc, pno);
			x = x1; y = y1 + k * dy;
			dc.MoveTo(x, y);
			dc.LineTo(x2, y);
		}


		DeleteObject(pno);
		SelectObject(dc, opn);




		CDialog::OnPaint();
	}
}

// The system calls this function to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CProgramDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

