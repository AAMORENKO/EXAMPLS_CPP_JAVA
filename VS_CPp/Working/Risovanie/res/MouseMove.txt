	m_aniBBS.Open(IDR_BBS);
	m_aniBBS.Play(0, (UINT) -1, 1);

-------------- onMouseMove
***
protected:
	void OnStart();
	void OnExit();
	HICON m_hIcon;
	HCURSOR m_hCursor;
***
if((!bEx.PtInRect(point))&&(!bNx.PtInRect(point)))
	{
		SetCursor(m_hCursor);
		ShowCursor(TRUE);
	}

-----
protected:
	HICON m_hIcon;
	HCURSOR m_hCursor;

	CBitmap m_K_Plants01;
	CBitmap m_K_Plants02;
	CBitmap m_K_Plants03;
	CBitmap m_K_Plants04;
	CBitmap m_K_Plants05;
	CBitmap m_K_Plants06;
	CBitmap m_K_Plants07;
	CBitmap m_K_Plants08;
	CBitmap m_K_Plants09;
	CBitmap m_K_Plants10;
	CBitmap m_K_Plants11;
	CBitmap m_K_Plants12;
	CBitmap m_K_Plants13;
	CBitmap m_K_Plants14;
	CBitmap m_K_Plants15;
	CBitmap m_K_Plants16;
	CBitmap m_K_Plants17;
	CBitmap m_K_Plants18;
	CBitmap m_K_Plants19;
	CBitmap m_K_Plants20;
	CBitmap m_K_Plants21;


------
CTheoryPlants::CTheoryPlants(CWnd* pParent /*=NULL*/)
	: CDialog(CTheoryPlants::IDD, pParent)
{
	//{{AFX_DATA_INIT(CTheoryPlants)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	m_hIcon = AfxGetApp()->LoadIcon(IDR_PLANTS);
	m_hCursor = AfxGetApp()->LoadCursor(IDC_MAINFRAME);

	m_K_Plants01.LoadBitmap(IDB_K_PLANTS01);
	m_K_Plants02.LoadBitmap(IDB_K_PLANTS19);
	m_K_Plants03.LoadBitmap(IDB_K_PLANTS10);
	m_K_Plants04.LoadBitmap(IDB_K_PLANTS02);
	m_K_Plants05.LoadBitmap(IDB_K_PLANTS03);
	m_K_Plants06.LoadBitmap(IDB_K_PLANTS06);
	m_K_Plants07.LoadBitmap(IDB_K_PLANTS04);
	m_K_Plants08.LoadBitmap(IDB_K_PLANTS21);
	m_K_Plants09.LoadBitmap(IDB_K_PLANTS05);
	m_K_Plants10.LoadBitmap(IDB_K_PLANTS07);
	m_K_Plants11.LoadBitmap(IDB_K_PLANTS11);
	m_K_Plants12.LoadBitmap(IDB_K_PLANTS14);
	m_K_Plants13.LoadBitmap(IDB_K_PLANTS08);
	m_K_Plants14.LoadBitmap(IDB_K_PLANTS12);
	m_K_Plants15.LoadBitmap(IDB_K_PLANTS17);
	m_K_Plants16.LoadBitmap(IDB_K_PLANTS15);
	m_K_Plants17.LoadBitmap(IDB_K_PLANTS09);
	m_K_Plants18.LoadBitmap(IDB_K_PLANTS13);
	m_K_Plants19.LoadBitmap(IDB_K_PLANTS18);
	m_K_Plants20.LoadBitmap(IDB_K_PLANTS20);
	m_K_Plants21.LoadBitmap(IDB_K_PLANTS16);


}

---------------

void CTheoryPlants::OnSelchangeCombo() 
{
	// TODO: Add your control notification handler code here
	int st=m_Combo.GetCurSel();
	switch(st)
	{
	case 0:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants01); 
			Invalidate(FALSE);
		}
		break;
	case 1:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants02);                         
			Invalidate(FALSE);
		}
		break;
	case 2:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants03);                         
			Invalidate(FALSE);
		}
		break;
	case 3:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants04);                         
			Invalidate(FALSE);
		}
		break;
	case 4:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants05);                         
			Invalidate(FALSE);
		}
		break;
	case 5:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants06);                      
			Invalidate(FALSE);
		}
		break;
	case 6:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants07);                         
			Invalidate(FALSE);
		}
		break;
	case 7:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants08);                         
			Invalidate(FALSE);
		}
		break;
	case 8:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants09);                         
			Invalidate(FALSE);
		}
		break;
	case 9:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants10);                         
			Invalidate(FALSE);
		}
		break;
	case 10:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants11);                         
			Invalidate(FALSE);
		}
		break;
	case 11:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants12);
			Invalidate(FALSE);
		}
		break;
	case 12:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants13);                         
			Invalidate(FALSE);
		}
		break;
	case 13:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants14);  
			Invalidate(FALSE);
		}
		break;
	case 14:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants15);                         
			Invalidate(FALSE);
		}
		break;
	case 15:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants16);                         
			Invalidate(FALSE);
		}
		break;
	case 16:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants17);                         
			Invalidate(FALSE);
		}
		break;
	case 17:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants18);                         
			Invalidate(FALSE);
		}
		break;
	case 18:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
		   	bmpStatic1->SetBitmap(m_K_Plants19);                         
			Invalidate(FALSE);
		}
		break;
	case 19:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants20);                         
			Invalidate(FALSE);
		}
		break;
	case 20:
		{
			CStatic* bmpStatic1 = (CStatic*) GetDlgItem(IDC_K_PLANTS);
			bmpStatic1->SetBitmap(m_K_Plants21);                         
			Invalidate(FALSE);
		}
		break;
	}	
}




***********
private:
	CStatic m_StPict;
	CStatic m_StMainPict;
	CStatic m_StBack;
	CStatic m_StNext;
	CStatic m_StTheme;
	int m_Pos;
	CFont *m_FontEd;
	CFont *m_FontSt;
public:
	CPoint mpoint;
	BOOL m_FlagCursor;
	BOOL m_FlagBack;
	BOOL m_FlagNext;
	void SetPage();
	void SetText(int m_File);
	UINT m_cur;
********

void CStudyDlg::OnMouseMove(UINT nFlags, CPoint point) 
{
	mpoint=point;
	CRect rect;
	m_StBack.GetWindowRect(rect);
	ScreenToClient(rect);
	if(rect.PtInRect(point) && m_FlagBack)
	{
		m_StBack.SetBitmap(:: LoadBitmap (AfxGetApp () -> m_hInstance, MAKEINTRESOURCE (IDB_BITMAP_BACKF)));
		SetTimer(1,300,0);
	}
	m_StNext.GetWindowRect(rect);
	ScreenToClient(rect);
	if(rect.PtInRect(point) && m_FlagNext)
	{
		m_StNext.SetBitmap(:: LoadBitmap (AfxGetApp () -> m_hInstance, MAKEINTRESOURCE (IDB_BITMAP_NEXTF)));
		SetTimer(1,300,0);
	}


	SendMessage(WM_SYSCOMMAND, 0xF012, NULL);
	CDialog::OnMouseMove(nFlags, point);
}

****
BOOL CStudyDlg::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message) 
{
	CRect rect1,rect2;
	m_StBack.GetWindowRect(rect1);
	m_StNext.GetWindowRect(rect2);
	ScreenToClient(rect1);
	ScreenToClient(rect2);

	if(rect1.PtInRect(mpoint) && m_FlagCursor && m_FlagBack)
	{
		SetCursor(LoadCursorFromFile("BOOK.ac"));
		m_FlagCursor=false;
		return false;
	}

	if(rect2.PtInRect(mpoint) && m_FlagCursor && m_FlagNext)
	{
		SetCursor(LoadCursorFromFile("BOOK.ac"));
		m_FlagCursor=false;
		return false;
	}

	if(!rect1.PtInRect(mpoint) && !rect2.PtInRect(mpoint))
	{
		m_cur=IDC_CURSOR_PAD;
		SetCursor(LoadCursor(AfxGetApp()->m_hInstance,MAKEINTRESOURCE(m_cur)));
		m_FlagCursor=true;
	}
	
	return false;
}


****



void CLookDlg::OnLButtonDown(UINT nFlags, CPoint point)

{

CRect left, right; 

//====== Узнаем координаты левой картинки 

GetDlgItem{IDC_LEFT)->GetWindowRect(Sleft); 

//====== Переход к относительным координатам 

ScreenToClient(Sleft); 

//====== Узнаем координаты правой картинки 

GetDlgItem(IDC_RIGHT)->GetWindowRect(Sright) ;

ScreenToClient(bright); 

//====== Объединяем площади двух картинок 

left.UnionRect(left,right); 

//====== Если координаты курсора внутри этой площади 

if (left.PtlnRect(point)) 

//====== Вызываем диалог About 

OnSysCommand(IDM_ABOUTBOX,0); 

//====== Вызов родительской версии CDialog::OnLButtonDown(nFlags, point); 

}